// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // Path for generated schemas
  createOptionalDefaultValuesTypes = true // Optional, generates types with default values
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DIRECT_URL")
}

model Budget {
  id          String          @id @default(uuid())
  name        String
  description String?
  totalAmount Float
  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id])
  expenses    Expense[]
  managers    BudgetManager[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
}

model Expense {
  id          String   @id @default(uuid())
  description String
  amount      Float
  budgetId    String
  budget      Budget   @relation(fields: [budgetId], references: [id])
  notes       String?
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  expenses Expense[]
}

model BudgetManager {
  id          String @id @default(uuid())
  budgetId    String
  userId      String
  budget      Budget @relation(fields: [budgetId], references: [id])
  user        User   @relation(fields: [userId], references: [id])
  permissions Json?

  @@unique([budgetId, userId])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  ownedBudgets   Budget[]
  managedBudgets BudgetManager[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
